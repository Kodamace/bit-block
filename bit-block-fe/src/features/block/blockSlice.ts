import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { getBlocks, getSingleBlock } from '../../api/block';
import { client } from '../../api/client';
import { RootState, AppThunk } from '../../app/store';

export interface ISingleBlock {
  hash: string;
  height: number;
  timestamp: string;
  numberOfTransactions: number,
  confirmations: number;
  miner: string;
  difficulty: number;
  bits: number;
  mrkl_root: string;
  ver: number;
  weight: number;
  size: number;
  nonce: number;
  transaction_volume: string;
  reward: string;
  fee: number;
  tx: any;
}

export interface ISingleBlockState {
  block: ISingleBlock;
  loading: boolean;
  status: any;
}

const initialState: ISingleBlockState = {
  block: <ISingleBlock>{},
  loading: false,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.



export const blockSlice = createSlice({
  name: 'block',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clearBlock(state) {
      state.block = <ISingleBlock>{}
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getSingleBlock.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(getSingleBlock.fulfilled, (state, action) => {
        state.block = action.payload
        // Object.assign(state.blocks[action.payload.hash], action.payload)
        // state.hashesOfDataReceived.push(action.payload.hash)
        state.status = 'idle'
      })
  },
});

// If we want to export our reducer funtions that update state we create them above and pass to the below export

export const { clearBlock } = blockSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount: number): AppThunk => (
//   dispatch,
//   getState
// ) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default blockSlice.reducer;
